//
//  StyleKit.swift
//  Photo Stickers
//
//  Created by Jochen Pfeiffer on 16.04.17.
//  Copyright Â© 2017 . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

import UIKit

public class StyleKit: NSObject {
    //// Cache

    private struct Cache {
        static let appColor: UIColor = UIColor(red: 0.030, green: 0.490, blue: 0.860, alpha: 1.000)
        static let stickerShadow: NSShadow = NSShadow(color: UIColor.black, offset: CGSize(width: 0, height: 3), blurRadius: 12)
        static var imageOfTrashToolbarIcon: UIImage?
        static var trashToolbarIconTargets: [AnyObject]?
        static var imageOfAddToolbarIcon: UIImage?
        static var addToolbarIconTargets: [AnyObject]?
        static var imageOfPhotoToolbarIcon: UIImage?
        static var photoToolbarIconTargets: [AnyObject]?
        static var imageOfEditToolbarIcon: UIImage?
        static var editToolbarIconTargets: [AnyObject]?
        static var imageOfStickerToolbarIcon: UIImage?
        static var stickerToolbarIconTargets: [AnyObject]?
    }

    //// Colors

    @objc public dynamic class var appColor: UIColor { return Cache.appColor }

    //// Shadows

    @objc public dynamic class var stickerShadow: NSShadow { return Cache.stickerShadow }

    //// Drawing Methods

    @objc public dynamic class func drawStarButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 54, height: 54), resizing: ResizingBehavior = .aspectFit, lineWidth: CGFloat = 1, selected: Bool = false, highlighted: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 54, height: 54), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 54, y: resizedFrame.height / 54)

        //// Color Declarations
        let highlightedColor = StyleKit.appColor.withSaturation(0.42)
        let transparentColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let strokeColor = highlighted ? highlightedColor : StyleKit.appColor
        let fillColor = selected || highlighted ? strokeColor : transparentColor

        //// star Drawing
        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 27, y: 3))
        starPath.addLine(to: CGPoint(x: 35.82, y: 15.86))
        starPath.addLine(to: CGPoint(x: 50.78, y: 20.27))
        starPath.addLine(to: CGPoint(x: 41.27, y: 32.64))
        starPath.addLine(to: CGPoint(x: 41.69, y: 48.23))
        starPath.addLine(to: CGPoint(x: 27, y: 43))
        starPath.addLine(to: CGPoint(x: 12.31, y: 48.23))
        starPath.addLine(to: CGPoint(x: 12.73, y: 32.64))
        starPath.addLine(to: CGPoint(x: 3.22, y: 20.27))
        starPath.addLine(to: CGPoint(x: 18.18, y: 15.86))
        starPath.close()
        fillColor.setFill()
        starPath.fill()
        strokeColor.setStroke()
        starPath.lineWidth = lineWidth
        starPath.lineJoinStyle = .round
        starPath.stroke()

        context.restoreGState()
    }

    @objc public dynamic class func drawMultiStarButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 54, height: 54), resizing: ResizingBehavior = .aspectFit, lineWidth: CGFloat = 1, selected: Bool = false, highlighted: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 54, height: 54), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 54, y: resizedFrame.height / 54)

        //// Color Declarations
        let highlightedColor = StyleKit.appColor.withSaturation(0.42)
        let transparentColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let strokeColor = highlighted ? highlightedColor : StyleKit.appColor
        let fillColor = selected || highlighted ? strokeColor : transparentColor

        //// star Drawing
        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 27, y: 2))
        starPath.addLine(to: CGPoint(x: 31.16, y: 7.43))
        starPath.addLine(to: CGPoint(x: 37.17, y: 4.16))
        starPath.addLine(to: CGPoint(x: 38.76, y: 10.81))
        starPath.addLine(to: CGPoint(x: 45.58, y: 10.27))
        starPath.addLine(to: CGPoint(x: 44.33, y: 17))
        starPath.addLine(to: CGPoint(x: 50.78, y: 19.27))
        starPath.addLine(to: CGPoint(x: 46.9, y: 24.91))
        starPath.addLine(to: CGPoint(x: 51.86, y: 29.61))
        starPath.addLine(to: CGPoint(x: 46.03, y: 33.18))
        starPath.addLine(to: CGPoint(x: 48.65, y: 39.5))
        starPath.addLine(to: CGPoint(x: 41.87, y: 40.39))
        starPath.addLine(to: CGPoint(x: 41.69, y: 47.23))
        starPath.addLine(to: CGPoint(x: 35.14, y: 45.28))
        starPath.addLine(to: CGPoint(x: 32.2, y: 51.45))
        starPath.addLine(to: CGPoint(x: 27, y: 47.01))
        starPath.addLine(to: CGPoint(x: 21.8, y: 51.45))
        starPath.addLine(to: CGPoint(x: 18.86, y: 45.28))
        starPath.addLine(to: CGPoint(x: 12.31, y: 47.23))
        starPath.addLine(to: CGPoint(x: 12.13, y: 40.39))
        starPath.addLine(to: CGPoint(x: 5.35, y: 39.5))
        starPath.addLine(to: CGPoint(x: 7.97, y: 33.18))
        starPath.addLine(to: CGPoint(x: 2.14, y: 29.61))
        starPath.addLine(to: CGPoint(x: 7.1, y: 24.91))
        starPath.addLine(to: CGPoint(x: 3.22, y: 19.27))
        starPath.addLine(to: CGPoint(x: 9.67, y: 17))
        starPath.addLine(to: CGPoint(x: 8.42, y: 10.27))
        starPath.addLine(to: CGPoint(x: 15.24, y: 10.81))
        starPath.addLine(to: CGPoint(x: 16.83, y: 4.16))
        starPath.addLine(to: CGPoint(x: 22.84, y: 7.43))
        starPath.close()
        fillColor.setFill()
        starPath.fill()
        strokeColor.setStroke()
        starPath.lineWidth = lineWidth
        starPath.lineJoinStyle = .round
        starPath.stroke()

        context.restoreGState()
    }

    @objc public dynamic class func drawCircleButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 54, height: 54), resizing: ResizingBehavior = .aspectFit, lineWidth: CGFloat = 1, selected: Bool = false, highlighted: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 54, height: 54), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 54, y: resizedFrame.height / 54)

        //// Color Declarations
        let highlightedColor = StyleKit.appColor.withSaturation(0.42)
        let transparentColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let strokeColor = highlighted ? highlightedColor : StyleKit.appColor
        let fillColor = selected || highlighted ? strokeColor : transparentColor

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 50, height: 50))
        fillColor.setFill()
        ovalPath.fill()
        strokeColor.setStroke()
        ovalPath.lineWidth = lineWidth
        ovalPath.lineJoinStyle = .round
        ovalPath.stroke()

        context.restoreGState()
    }

    @objc public dynamic class func drawRectangleButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 54, height: 54), resizing: ResizingBehavior = .aspectFit, lineWidth: CGFloat = 1, selected: Bool = false, highlighted: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 54, height: 54), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 54, y: resizedFrame.height / 54)

        //// Color Declarations
        let highlightedColor = StyleKit.appColor.withSaturation(0.42)
        let transparentColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let strokeColor = highlighted ? highlightedColor : StyleKit.appColor
        let fillColor = selected || highlighted ? strokeColor : transparentColor

        //// rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 2, y: 2, width: 50, height: 50), cornerRadius: 8)
        fillColor.setFill()
        rectanglePath.fill()
        strokeColor.setStroke()
        rectanglePath.lineWidth = lineWidth
        rectanglePath.lineJoinStyle = .round
        rectanglePath.stroke()

        context.restoreGState()
    }

    @objc public dynamic class func drawAppIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 120, height: 110), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 120, height: 110), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 120, y: resizedFrame.height / 110)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 120, resizedFrame.height / 110)

        //// Color Declarations
        let appIconShadowTint = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let appIconBorderColor = UIColor(red: 0.979, green: 0.979, blue: 0.979, alpha: 1.000)
        let appIconGradientColor = UIColor(red: 0.160, green: 0.520, blue: 0.840, alpha: 1.000)
        let appIconGradientColor2 = UIColor(red: 0.120, green: 0.400, blue: 0.760, alpha: 1.000)

        //// Gradient Declarations
        let appIconGradient = CGGradient(colorsSpace: nil, colors: [appIconGradientColor.cgColor, appIconGradientColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Shadow Declarations
        let appIconShadow = NSShadow(color: appIconShadowTint.withAlphaComponent(0.7 * appIconShadowTint.cgColor.alpha), offset: CGSize(width: 0, height: 1), blurRadius: 6)

        //// Group 2
        //// Group 3
        context.saveGState()
        context.setShadow(offset: CGSize(width: appIconShadow.shadowOffset.width * resizedShadowScale, height: appIconShadow.shadowOffset.height * resizedShadowScale), blur: appIconShadow.shadowBlurRadius * resizedShadowScale, color: (appIconShadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 63.13, y: 80.68))
        bezierPath.addCurve(to: CGPoint(x: 104.32, y: 44.19), controlPoint1: CGPoint(x: 87.72, y: 78.1), controlPoint2: CGPoint(x: 106.16, y: 61.76))
        bezierPath.addCurve(to: CGPoint(x: 56.45, y: 17.06), controlPoint1: CGPoint(x: 102.47, y: 26.62), controlPoint2: CGPoint(x: 81.04, y: 14.47))
        bezierPath.addCurve(to: CGPoint(x: 15.26, y: 53.55), controlPoint1: CGPoint(x: 31.85, y: 19.64), controlPoint2: CGPoint(x: 13.42, y: 35.98))
        bezierPath.addCurve(to: CGPoint(x: 38.1, y: 78.02), controlPoint1: CGPoint(x: 16.43, y: 64.66), controlPoint2: CGPoint(x: 25.43, y: 73.6))
        bezierPath.addLine(to: CGPoint(x: 36.77, y: 89.84))
        bezierPath.addCurve(to: CGPoint(x: 43.31, y: 93.36), controlPoint1: CGPoint(x: 36.15, y: 95.33), controlPoint2: CGPoint(x: 39.08, y: 96.91))
        bezierPath.addLine(to: CGPoint(x: 58.02, y: 81.01))
        bezierPath.addCurve(to: CGPoint(x: 63.13, y: 80.68), controlPoint1: CGPoint(x: 59.71, y: 80.97), controlPoint2: CGPoint(x: 61.41, y: 80.86))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 46.52, y: 97.19))
        bezierPath.addCurve(to: CGPoint(x: 31.8, y: 89.28), controlPoint1: CGPoint(x: 38.83, y: 103.64), controlPoint2: CGPoint(x: 30.68, y: 99.26))
        bezierPath.addLine(to: CGPoint(x: 32.7, y: 81.27))
        bezierPath.addCurve(to: CGPoint(x: 10.29, y: 54.07), controlPoint1: CGPoint(x: 20.04, y: 75.74), controlPoint2: CGPoint(x: 11.53, y: 65.89))
        bezierPath.addCurve(to: CGPoint(x: 55.92, y: 12.09), controlPoint1: CGPoint(x: 8.11, y: 33.33), controlPoint2: CGPoint(x: 28.87, y: 14.93))
        bezierPath.addCurve(to: CGPoint(x: 109.29, y: 43.67), controlPoint1: CGPoint(x: 82.97, y: 9.24), controlPoint2: CGPoint(x: 107.11, y: 22.92))
        bezierPath.addCurve(to: CGPoint(x: 63.65, y: 85.65), controlPoint1: CGPoint(x: 111.47, y: 64.41), controlPoint2: CGPoint(x: 90.7, y: 82.81))
        bezierPath.addCurve(to: CGPoint(x: 59.92, y: 85.94), controlPoint1: CGPoint(x: 62.41, y: 85.79), controlPoint2: CGPoint(x: 61.16, y: 85.88))
        bezierPath.addLine(to: CGPoint(x: 46.52, y: 97.19))
        bezierPath.close()
        appIconBorderColor.setFill()
        bezierPath.fill()

        //// Group 4
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 58.02, y: 81.01))
        clipPath.addCurve(to: CGPoint(x: 63.13, y: 80.68), controlPoint1: CGPoint(x: 59.71, y: 80.97), controlPoint2: CGPoint(x: 61.41, y: 80.86))
        clipPath.addCurve(to: CGPoint(x: 104.32, y: 44.19), controlPoint1: CGPoint(x: 87.72, y: 78.1), controlPoint2: CGPoint(x: 106.16, y: 61.76))
        clipPath.addCurve(to: CGPoint(x: 56.45, y: 17.06), controlPoint1: CGPoint(x: 102.47, y: 26.62), controlPoint2: CGPoint(x: 81.04, y: 14.47))
        clipPath.addCurve(to: CGPoint(x: 15.26, y: 53.55), controlPoint1: CGPoint(x: 31.85, y: 19.64), controlPoint2: CGPoint(x: 13.42, y: 35.98))
        clipPath.addCurve(to: CGPoint(x: 38.1, y: 78.02), controlPoint1: CGPoint(x: 16.43, y: 64.66), controlPoint2: CGPoint(x: 25.43, y: 73.6))
        clipPath.addLine(to: CGPoint(x: 36.77, y: 89.84))
        clipPath.addCurve(to: CGPoint(x: 43.31, y: 93.36), controlPoint1: CGPoint(x: 36.15, y: 95.33), controlPoint2: CGPoint(x: 39.08, y: 96.91))
        clipPath.addLine(to: CGPoint(x: 58.02, y: 81.01))
        clipPath.addLine(to: CGPoint(x: 58.02, y: 81.01))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -2, y: -1, width: 124, height: 115))
        context.saveGState()
        rectanglePath.addClip()
        context.drawLinearGradient(appIconGradient,
                                   start: CGPoint(x: 59.79, y: 52.21),
                                   end: CGPoint(x: 59.79, y: 95.26),
                                   options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: -2, y: -1, width: 124, height: 115))
        context.saveGState()
        rectangle2Path.addClip()
        context.drawLinearGradient(appIconGradient,
                                   start: CGPoint(x: 59.79, y: 52.21),
                                   end: CGPoint(x: 59.79, y: 95.26),
                                   options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()

        //// Group 5
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 39.36, y: 64.02))
        clip2Path.addLine(to: CGPoint(x: 82.68, y: 60.23))
        clip2Path.addLine(to: CGPoint(x: 71.56, y: 49.41))
        clip2Path.addLine(to: CGPoint(x: 66.33, y: 55.61))
        clip2Path.addCurve(to: CGPoint(x: 62.68, y: 55.93), controlPoint1: CGPoint(x: 65.41, y: 56.69), controlPoint2: CGPoint(x: 63.78, y: 56.84))
        clip2Path.addLine(to: CGPoint(x: 50.97, y: 46.16))
        clip2Path.addLine(to: CGPoint(x: 39.36, y: 64.02))
        clip2Path.close()
        clip2Path.move(to: CGPoint(x: 69.41, y: 44.2))
        clip2Path.addCurve(to: CGPoint(x: 73.2, y: 44.03), controlPoint1: CGPoint(x: 70.4, y: 43.03), controlPoint2: CGPoint(x: 72.14, y: 42.99))
        clip2Path.addLine(to: CGPoint(x: 90.01, y: 60.38))
        clip2Path.addCurve(to: CGPoint(x: 90.7, y: 62.88), controlPoint1: CGPoint(x: 90.61, y: 60.97), controlPoint2: CGPoint(x: 91, y: 61.79))
        clip2Path.addCurve(to: CGPoint(x: 88.45, y: 64.75), controlPoint1: CGPoint(x: 90.36, y: 64.14), controlPoint2: CGPoint(x: 89.41, y: 64.66))
        clip2Path.addLine(to: CGPoint(x: 34.78, y: 69.44))
        clip2Path.addCurve(to: CGPoint(x: 32.43, y: 65.51), controlPoint1: CGPoint(x: 32.6, y: 69.63), controlPoint2: CGPoint(x: 31.28, y: 67.27))
        clip2Path.addLine(to: CGPoint(x: 48.26, y: 41.17))
        clip2Path.addCurve(to: CGPoint(x: 52.09, y: 40.58), controlPoint1: CGPoint(x: 49.1, y: 39.88), controlPoint2: CGPoint(x: 50.89, y: 39.58))
        clip2Path.addLine(to: CGPoint(x: 64.05, y: 50.56))
        clip2Path.addLine(to: CGPoint(x: 69.41, y: 44.2))
        clip2Path.close()
        clip2Path.addClip()

        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: 60.4, y: 53.15)
        context.rotate(by: -5 * CGFloat.pi / 180)

        let rectangle3Path = UIBezierPath(rect: CGRect(x: -34.5, y: -19, width: 69, height: 38))
        appIconBorderColor.setFill()
        rectangle3Path.fill()

        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()

        //// Group 6
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.move(to: CGPoint(x: 74.77, y: 37.07))
        clip3Path.addCurve(to: CGPoint(x: 67.19, y: 30.71), controlPoint1: CGPoint(x: 70.92, y: 37.41), controlPoint2: CGPoint(x: 67.52, y: 34.56))
        clip3Path.addCurve(to: CGPoint(x: 73.55, y: 23.12), controlPoint1: CGPoint(x: 66.85, y: 26.86), controlPoint2: CGPoint(x: 69.7, y: 23.46))
        clip3Path.addCurve(to: CGPoint(x: 81.13, y: 29.49), controlPoint1: CGPoint(x: 77.4, y: 22.79), controlPoint2: CGPoint(x: 80.8, y: 25.64))
        clip3Path.addCurve(to: CGPoint(x: 74.77, y: 37.07), controlPoint1: CGPoint(x: 81.47, y: 33.34), controlPoint2: CGPoint(x: 78.62, y: 36.73))
        clip3Path.close()
        clip3Path.move(to: CGPoint(x: 74.42, y: 33.09))
        clip3Path.addCurve(to: CGPoint(x: 77.15, y: 29.84), controlPoint1: CGPoint(x: 76.07, y: 32.94), controlPoint2: CGPoint(x: 77.29, y: 31.49))
        clip3Path.addCurve(to: CGPoint(x: 73.9, y: 27.11), controlPoint1: CGPoint(x: 77, y: 28.19), controlPoint2: CGPoint(x: 75.55, y: 26.96))
        clip3Path.addCurve(to: CGPoint(x: 71.17, y: 30.36), controlPoint1: CGPoint(x: 72.25, y: 27.25), controlPoint2: CGPoint(x: 71.03, y: 28.71))
        clip3Path.addCurve(to: CGPoint(x: 74.42, y: 33.09), controlPoint1: CGPoint(x: 71.32, y: 32.01), controlPoint2: CGPoint(x: 72.77, y: 33.23))
        clip3Path.close()
        clip3Path.addClip()

        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 74.15, y: 30.1)
        context.rotate(by: -5 * CGFloat.pi / 180)

        let rectangle4Path = UIBezierPath(rect: CGRect(x: -12, y: -12, width: 24, height: 24))
        appIconBorderColor.setFill()
        rectangle4Path.fill()

        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()
    }

    @objc public dynamic class func drawTrashToolbarIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 22)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 5.48, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 5.01, y: 6.53), controlPoint1: CGPoint(x: 5.2, y: 6.02), controlPoint2: CGPoint(x: 4.99, y: 6.25))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 18.53))
        bezierPath.addCurve(to: CGPoint(x: 6.03, y: 19), controlPoint1: CGPoint(x: 5.52, y: 18.81), controlPoint2: CGPoint(x: 5.75, y: 19.02))
        bezierPath.addCurve(to: CGPoint(x: 6.5, y: 18.47), controlPoint1: CGPoint(x: 6.31, y: 18.98), controlPoint2: CGPoint(x: 6.52, y: 18.75))
        bezierPath.addLine(to: CGPoint(x: 6, y: 6.47))
        bezierPath.addCurve(to: CGPoint(x: 5.48, y: 6), controlPoint1: CGPoint(x: 5.99, y: 6.2), controlPoint2: CGPoint(x: 5.75, y: 5.98))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 8.5, y: 6.5), controlPoint1: CGPoint(x: 8.72, y: 6), controlPoint2: CGPoint(x: 8.5, y: 6.22))
        bezierPath.addLine(to: CGPoint(x: 8.5, y: 18.5))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 19), controlPoint1: CGPoint(x: 8.5, y: 18.78), controlPoint2: CGPoint(x: 8.72, y: 19))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 18.5), controlPoint1: CGPoint(x: 9.28, y: 19), controlPoint2: CGPoint(x: 9.5, y: 18.78))
        bezierPath.addLine(to: CGPoint(x: 9.5, y: 6.5))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 6), controlPoint1: CGPoint(x: 9.5, y: 6.22), controlPoint2: CGPoint(x: 9.28, y: 6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 17.5, y: 3))
        bezierPath.addLine(to: CGPoint(x: 13.5, y: 3))
        bezierPath.addLine(to: CGPoint(x: 13.5, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 11.5, y: 0), controlPoint1: CGPoint(x: 13.5, y: 0.89), controlPoint2: CGPoint(x: 12.6, y: 0))
        bezierPath.addLine(to: CGPoint(x: 6.5, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 4.5, y: 2), controlPoint1: CGPoint(x: 5.4, y: 0), controlPoint2: CGPoint(x: 4.5, y: 0.89))
        bezierPath.addLine(to: CGPoint(x: 4.5, y: 3))
        bezierPath.addLine(to: CGPoint(x: 0.5, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 3.5), controlPoint1: CGPoint(x: 0.22, y: 3), controlPoint2: CGPoint(x: 0, y: 3.22))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: 4), controlPoint1: CGPoint(x: 0, y: 3.78), controlPoint2: CGPoint(x: 0.22, y: 4))
        bezierPath.addLine(to: CGPoint(x: 1, y: 4))
        bezierPath.addLine(to: CGPoint(x: 2, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 22), controlPoint1: CGPoint(x: 2, y: 21.1), controlPoint2: CGPoint(x: 2.9, y: 22))
        bezierPath.addLine(to: CGPoint(x: 14, y: 22))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 20), controlPoint1: CGPoint(x: 15.1, y: 22), controlPoint2: CGPoint(x: 16, y: 21.1))
        bezierPath.addLine(to: CGPoint(x: 17, y: 4))
        bezierPath.addLine(to: CGPoint(x: 17.5, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 3.5), controlPoint1: CGPoint(x: 17.78, y: 4), controlPoint2: CGPoint(x: 18, y: 3.78))
        bezierPath.addCurve(to: CGPoint(x: 17.5, y: 3), controlPoint1: CGPoint(x: 18, y: 3.22), controlPoint2: CGPoint(x: 17.78, y: 3))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 5.5, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 6.5, y: 1), controlPoint1: CGPoint(x: 5.5, y: 1.45), controlPoint2: CGPoint(x: 5.95, y: 1))
        bezierPath.addLine(to: CGPoint(x: 11.5, y: 1))
        bezierPath.addCurve(to: CGPoint(x: 12.5, y: 2), controlPoint1: CGPoint(x: 12.05, y: 1), controlPoint2: CGPoint(x: 12.5, y: 1.45))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 3))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 3))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 2))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 15, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 21), controlPoint1: CGPoint(x: 15, y: 20.55), controlPoint2: CGPoint(x: 14.55, y: 21))
        bezierPath.addLine(to: CGPoint(x: 4, y: 21))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 20), controlPoint1: CGPoint(x: 3.45, y: 21), controlPoint2: CGPoint(x: 3, y: 20.55))
        bezierPath.addLine(to: CGPoint(x: 2, y: 4))
        bezierPath.addLine(to: CGPoint(x: 4.5, y: 4))
        bezierPath.addLine(to: CGPoint(x: 5.22, y: 4))
        bezierPath.addLine(to: CGPoint(x: 12.78, y: 4))
        bezierPath.addLine(to: CGPoint(x: 13.5, y: 4))
        bezierPath.addLine(to: CGPoint(x: 16, y: 4))
        bezierPath.addLine(to: CGPoint(x: 15, y: 20))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 12.52, y: 6.03))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 6.5), controlPoint1: CGPoint(x: 12.25, y: 6.02), controlPoint2: CGPoint(x: 12.01, y: 6.23))
        bezierPath.addLine(to: CGPoint(x: 11.5, y: 18.47))
        bezierPath.addCurve(to: CGPoint(x: 11.97, y: 19), controlPoint1: CGPoint(x: 11.48, y: 18.75), controlPoint2: CGPoint(x: 11.7, y: 18.98))
        bezierPath.addCurve(to: CGPoint(x: 12.5, y: 18.53), controlPoint1: CGPoint(x: 12.25, y: 19.02), controlPoint2: CGPoint(x: 12.48, y: 18.81))
        bezierPath.addLine(to: CGPoint(x: 12.99, y: 6.56))
        bezierPath.addCurve(to: CGPoint(x: 12.52, y: 6.03), controlPoint1: CGPoint(x: 13.01, y: 6.28), controlPoint2: CGPoint(x: 12.8, y: 6.05))
        bezierPath.close()
        StyleKit.appColor.setFill()
        bezierPath.fill()

        context.restoreGState()
    }

    @objc public dynamic class func drawAddToolbarIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 22)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16, y: 10.5))
        bezierPath.addLine(to: CGPoint(x: 11.5, y: 10.5))
        bezierPath.addLine(to: CGPoint(x: 11.5, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 5.5), controlPoint1: CGPoint(x: 11.5, y: 5.72), controlPoint2: CGPoint(x: 11.28, y: 5.5))
        bezierPath.addCurve(to: CGPoint(x: 10.5, y: 6), controlPoint1: CGPoint(x: 10.72, y: 5.5), controlPoint2: CGPoint(x: 10.5, y: 5.72))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 10.5))
        bezierPath.addLine(to: CGPoint(x: 6, y: 10.5))
        bezierPath.addCurve(to: CGPoint(x: 5.5, y: 11), controlPoint1: CGPoint(x: 5.72, y: 10.5), controlPoint2: CGPoint(x: 5.5, y: 10.72))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 11.5), controlPoint1: CGPoint(x: 5.5, y: 11.28), controlPoint2: CGPoint(x: 5.72, y: 11.5))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 11.5))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 16.5), controlPoint1: CGPoint(x: 10.5, y: 16.28), controlPoint2: CGPoint(x: 10.72, y: 16.5))
        bezierPath.addCurve(to: CGPoint(x: 11.5, y: 16), controlPoint1: CGPoint(x: 11.28, y: 16.5), controlPoint2: CGPoint(x: 11.5, y: 16.28))
        bezierPath.addLine(to: CGPoint(x: 11.5, y: 11.5))
        bezierPath.addLine(to: CGPoint(x: 16, y: 11.5))
        bezierPath.addCurve(to: CGPoint(x: 16.5, y: 11), controlPoint1: CGPoint(x: 16.28, y: 11.5), controlPoint2: CGPoint(x: 16.5, y: 11.28))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 10.5), controlPoint1: CGPoint(x: 16.5, y: 10.72), controlPoint2: CGPoint(x: 16.28, y: 10.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 11, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 0), controlPoint2: CGPoint(x: 0, y: 4.93))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 0, y: 17.07), controlPoint2: CGPoint(x: 4.92, y: 22))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.07, y: 22), controlPoint2: CGPoint(x: 22, y: 17.07))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 22, y: 4.93), controlPoint2: CGPoint(x: 17.07, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 11, y: 21))
        bezierPath.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 21), controlPoint2: CGPoint(x: 1, y: 16.52))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 1, y: 5.48), controlPoint2: CGPoint(x: 5.48, y: 1))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 1), controlPoint2: CGPoint(x: 21, y: 5.48))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 21, y: 16.52), controlPoint2: CGPoint(x: 16.52, y: 21))
        bezierPath.close()
        StyleKit.appColor.setFill()
        bezierPath.fill()

        context.restoreGState()
    }

    @objc public dynamic class func drawPhotoToolbarIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 18)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3.5, y: 15))
        bezierPath.addLine(to: CGPoint(x: 18.5, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 19, y: 14.5), controlPoint1: CGPoint(x: 18.78, y: 15), controlPoint2: CGPoint(x: 19, y: 14.78))
        bezierPath.addCurve(to: CGPoint(x: 18.87, y: 14.17), controlPoint1: CGPoint(x: 19, y: 14.37), controlPoint2: CGPoint(x: 18.95, y: 14.26))
        bezierPath.addLine(to: CGPoint(x: 18.87, y: 14.17))
        bezierPath.addLine(to: CGPoint(x: 14.87, y: 9.17))
        bezierPath.addLine(to: CGPoint(x: 14.87, y: 9.17))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 9), controlPoint1: CGPoint(x: 14.78, y: 9.07), controlPoint2: CGPoint(x: 14.65, y: 9))
        bezierPath.addCurve(to: CGPoint(x: 14.15, y: 9.15), controlPoint1: CGPoint(x: 14.36, y: 9), controlPoint2: CGPoint(x: 14.24, y: 9.06))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 10.79))
        bezierPath.addLine(to: CGPoint(x: 8.85, y: 7.15))
        bezierPath.addCurve(to: CGPoint(x: 8.5, y: 7), controlPoint1: CGPoint(x: 8.76, y: 7.06), controlPoint2: CGPoint(x: 8.64, y: 7))
        bezierPath.addCurve(to: CGPoint(x: 8.11, y: 7.2), controlPoint1: CGPoint(x: 8.34, y: 7), controlPoint2: CGPoint(x: 8.2, y: 7.08))
        bezierPath.addLine(to: CGPoint(x: 8.11, y: 7.19))
        bezierPath.addLine(to: CGPoint(x: 3.11, y: 14.19))
        bezierPath.addLine(to: CGPoint(x: 3.11, y: 14.2))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 14.5), controlPoint1: CGPoint(x: 3.05, y: 14.28), controlPoint2: CGPoint(x: 3, y: 14.38))
        bezierPath.addCurve(to: CGPoint(x: 3.5, y: 15), controlPoint1: CGPoint(x: 3, y: 14.78), controlPoint2: CGPoint(x: 3.22, y: 15))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 8.56, y: 8.27))
        bezierPath.addLine(to: CGPoint(x: 12.15, y: 11.85))
        bezierPath.addCurve(to: CGPoint(x: 12.5, y: 12), controlPoint1: CGPoint(x: 12.24, y: 11.94), controlPoint2: CGPoint(x: 12.36, y: 12))
        bezierPath.addCurve(to: CGPoint(x: 12.85, y: 11.85), controlPoint1: CGPoint(x: 12.64, y: 12), controlPoint2: CGPoint(x: 12.76, y: 11.94))
        bezierPath.addLine(to: CGPoint(x: 14.46, y: 10.25))
        bezierPath.addLine(to: CGPoint(x: 17.46, y: 14))
        bezierPath.addLine(to: CGPoint(x: 4.47, y: 14))
        bezierPath.addLine(to: CGPoint(x: 8.56, y: 8.27))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 17, y: 6.99))
        bezierPath.addCurve(to: CGPoint(x: 19, y: 5), controlPoint1: CGPoint(x: 18.11, y: 6.99), controlPoint2: CGPoint(x: 19, y: 6.1))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 3), controlPoint1: CGPoint(x: 19, y: 3.89), controlPoint2: CGPoint(x: 18.11, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 5), controlPoint1: CGPoint(x: 15.9, y: 3), controlPoint2: CGPoint(x: 15, y: 3.89))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 6.99), controlPoint1: CGPoint(x: 15, y: 6.1), controlPoint2: CGPoint(x: 15.9, y: 6.99))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 17, y: 4.01))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 5.01), controlPoint1: CGPoint(x: 17.55, y: 4.01), controlPoint2: CGPoint(x: 18, y: 4.46))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 6), controlPoint1: CGPoint(x: 18, y: 5.56), controlPoint2: CGPoint(x: 17.55, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 16.01, y: 5.01), controlPoint1: CGPoint(x: 16.45, y: 6), controlPoint2: CGPoint(x: 16.01, y: 5.56))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 4.01), controlPoint1: CGPoint(x: 16.01, y: 4.46), controlPoint2: CGPoint(x: 16.45, y: 4.01))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 21, y: 0))
        bezierPath.addLine(to: CGPoint(x: 1, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 1), controlPoint1: CGPoint(x: 0.45, y: 0), controlPoint2: CGPoint(x: 0, y: 0.45))
        bezierPath.addLine(to: CGPoint(x: 0, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 1, y: 18), controlPoint1: CGPoint(x: 0, y: 17.55), controlPoint2: CGPoint(x: 0.45, y: 18))
        bezierPath.addLine(to: CGPoint(x: 21, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 17), controlPoint1: CGPoint(x: 21.55, y: 18), controlPoint2: CGPoint(x: 22, y: 17.55))
        bezierPath.addLine(to: CGPoint(x: 22, y: 1))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 0), controlPoint1: CGPoint(x: 22, y: 0.45), controlPoint2: CGPoint(x: 21.55, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 21, y: 17))
        bezierPath.addLine(to: CGPoint(x: 1, y: 17))
        bezierPath.addLine(to: CGPoint(x: 1, y: 1))
        bezierPath.addLine(to: CGPoint(x: 21, y: 1))
        bezierPath.addLine(to: CGPoint(x: 21, y: 17))
        bezierPath.close()
        StyleKit.appColor.setFill()
        bezierPath.fill()

        context.restoreGState()
    }

    @objc public dynamic class func drawEditToolbarIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 22)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 21.85, y: 5.15))
        bezierPath.addLine(to: CGPoint(x: 21.85, y: 5.15))
        bezierPath.addLine(to: CGPoint(x: 16.85, y: 0.15))
        bezierPath.addLine(to: CGPoint(x: 16.85, y: 0.15))
        bezierPath.addCurve(to: CGPoint(x: 16.5, y: 0), controlPoint1: CGPoint(x: 16.76, y: 0.06), controlPoint2: CGPoint(x: 16.64, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 16.13, y: 0.16), controlPoint1: CGPoint(x: 16.35, y: 0), controlPoint2: CGPoint(x: 16.23, y: 0.06))
        bezierPath.addLine(to: CGPoint(x: 2.15, y: 14.14))
        bezierPath.addCurve(to: CGPoint(x: 2.02, y: 14.36), controlPoint1: CGPoint(x: 2.09, y: 14.2), controlPoint2: CGPoint(x: 2.05, y: 14.28))
        bezierPath.addLine(to: CGPoint(x: 2.02, y: 14.36))
        bezierPath.addLine(to: CGPoint(x: 0.02, y: 21.36))
        bezierPath.addLine(to: CGPoint(x: 0.03, y: 21.36))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 21.5), controlPoint1: CGPoint(x: 0.01, y: 21.41), controlPoint2: CGPoint(x: 0, y: 21.45))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: 22), controlPoint1: CGPoint(x: 0, y: 21.77), controlPoint2: CGPoint(x: 0.22, y: 22))
        bezierPath.addCurve(to: CGPoint(x: 0.64, y: 21.98), controlPoint1: CGPoint(x: 0.55, y: 22), controlPoint2: CGPoint(x: 0.59, y: 21.99))
        bezierPath.addLine(to: CGPoint(x: 0.64, y: 21.98))
        bezierPath.addLine(to: CGPoint(x: 7.64, y: 19.98))
        bezierPath.addLine(to: CGPoint(x: 7.64, y: 19.98))
        bezierPath.addCurve(to: CGPoint(x: 7.86, y: 19.85), controlPoint1: CGPoint(x: 7.72, y: 19.95), controlPoint2: CGPoint(x: 7.8, y: 19.91))
        bezierPath.addLine(to: CGPoint(x: 21.84, y: 5.87))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 5.5), controlPoint1: CGPoint(x: 21.94, y: 5.78), controlPoint2: CGPoint(x: 22, y: 5.65))
        bezierPath.addCurve(to: CGPoint(x: 21.85, y: 5.15), controlPoint1: CGPoint(x: 22, y: 5.36), controlPoint2: CGPoint(x: 21.94, y: 5.24))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7, y: 19.12))
        bezierPath.addLine(to: CGPoint(x: 1.23, y: 20.77))
        bezierPath.addLine(to: CGPoint(x: 2.88, y: 15))
        bezierPath.addLine(to: CGPoint(x: 4.5, y: 15))
        bezierPath.addLine(to: CGPoint(x: 4.5, y: 16.97))
        bezierPath.addCurve(to: CGPoint(x: 4.49, y: 17), controlPoint1: CGPoint(x: 4.5, y: 16.98), controlPoint2: CGPoint(x: 4.49, y: 16.99))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 17.51), controlPoint1: CGPoint(x: 4.49, y: 17.28), controlPoint2: CGPoint(x: 4.72, y: 17.51))
        bezierPath.addCurve(to: CGPoint(x: 5.03, y: 17.5), controlPoint1: CGPoint(x: 5.01, y: 17.51), controlPoint2: CGPoint(x: 5.02, y: 17.5))
        bezierPath.addLine(to: CGPoint(x: 7, y: 17.5))
        bezierPath.addLine(to: CGPoint(x: 7, y: 19.12))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 8, y: 18.29))
        bezierPath.addLine(to: CGPoint(x: 8, y: 17))
        bezierPath.addLine(to: CGPoint(x: 8, y: 17))
        bezierPath.addLine(to: CGPoint(x: 8, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 7.5, y: 16.5), controlPoint1: CGPoint(x: 8, y: 16.72), controlPoint2: CGPoint(x: 7.78, y: 16.5))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 16.5))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 16.5))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 14.5))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 14), controlPoint1: CGPoint(x: 5.5, y: 14.22), controlPoint2: CGPoint(x: 5.28, y: 14))
        bezierPath.addLine(to: CGPoint(x: 5, y: 14))
        bezierPath.addLine(to: CGPoint(x: 3.71, y: 14))
        bezierPath.addLine(to: CGPoint(x: 13.5, y: 4.21))
        bezierPath.addLine(to: CGPoint(x: 17.79, y: 8.5))
        bezierPath.addLine(to: CGPoint(x: 8, y: 18.29))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 18.5, y: 7.79))
        bezierPath.addLine(to: CGPoint(x: 14.21, y: 3.5))
        bezierPath.addLine(to: CGPoint(x: 16.5, y: 1.21))
        bezierPath.addLine(to: CGPoint(x: 20.79, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 18.5, y: 7.79))
        bezierPath.close()
        StyleKit.appColor.setFill()
        bezierPath.fill()

        context.restoreGState()
    }

    @objc public dynamic class func drawStickerToolbarIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 20)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 11.75, y: 15.66))
        bezierPath.addCurve(to: CGPoint(x: 20.97, y: 7.3), controlPoint1: CGPoint(x: 17.25, y: 15.07), controlPoint2: CGPoint(x: 21.38, y: 11.33))
        bezierPath.addCurve(to: CGPoint(x: 10.25, y: 1.08), controlPoint1: CGPoint(x: 20.55, y: 3.27), controlPoint2: CGPoint(x: 15.76, y: 0.49))
        bezierPath.addCurve(to: CGPoint(x: 1.03, y: 9.44), controlPoint1: CGPoint(x: 4.75, y: 1.68), controlPoint2: CGPoint(x: 0.62, y: 5.42))
        bezierPath.addCurve(to: CGPoint(x: 6.14, y: 15.05), controlPoint1: CGPoint(x: 1.29, y: 11.99), controlPoint2: CGPoint(x: 3.31, y: 14.04))
        bezierPath.addLine(to: CGPoint(x: 5.85, y: 17.76))
        bezierPath.addCurve(to: CGPoint(x: 7.31, y: 18.57), controlPoint1: CGPoint(x: 5.71, y: 19.02), controlPoint2: CGPoint(x: 6.36, y: 19.38))
        bezierPath.addLine(to: CGPoint(x: 10.6, y: 15.74))
        bezierPath.addCurve(to: CGPoint(x: 11.75, y: 15.66), controlPoint1: CGPoint(x: 10.98, y: 15.73), controlPoint2: CGPoint(x: 11.36, y: 15.7))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7.96, y: 19.33))
        bezierPath.addCurve(to: CGPoint(x: 4.85, y: 17.65), controlPoint1: CGPoint(x: 6.32, y: 20.74), controlPoint2: CGPoint(x: 4.61, y: 19.8))
        bezierPath.addLine(to: CGPoint(x: 5.06, y: 15.7))
        bezierPath.addCurve(to: CGPoint(x: 0.03, y: 9.55), controlPoint1: CGPoint(x: 2.22, y: 14.46), controlPoint2: CGPoint(x: 0.31, y: 12.22))
        bezierPath.addCurve(to: CGPoint(x: 10.14, y: 0.08), controlPoint1: CGPoint(x: -0.44, y: 4.89), controlPoint2: CGPoint(x: 4.15, y: 0.73))
        bezierPath.addCurve(to: CGPoint(x: 21.97, y: 7.2), controlPoint1: CGPoint(x: 16.15, y: -0.56), controlPoint2: CGPoint(x: 21.49, y: 2.54))
        bezierPath.addCurve(to: CGPoint(x: 11.86, y: 16.66), controlPoint1: CGPoint(x: 22.44, y: 11.85), controlPoint2: CGPoint(x: 17.85, y: 16.01))
        bezierPath.addCurve(to: CGPoint(x: 10.99, y: 16.73), controlPoint1: CGPoint(x: 11.57, y: 16.69), controlPoint2: CGPoint(x: 11.28, y: 16.71))
        bezierPath.addLine(to: CGPoint(x: 7.96, y: 19.33))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 8.98, y: 8.26))
        bezierPath.addLine(to: CGPoint(x: 6.3, y: 12.29))
        bezierPath.addLine(to: CGPoint(x: 16.16, y: 11.43))
        bezierPath.addLine(to: CGPoint(x: 13.57, y: 8.96))
        bezierPath.addLine(to: CGPoint(x: 12.38, y: 10.34))
        bezierPath.addCurve(to: CGPoint(x: 11.61, y: 10.41), controlPoint1: CGPoint(x: 12.19, y: 10.56), controlPoint2: CGPoint(x: 11.85, y: 10.6))
        bezierPath.addLine(to: CGPoint(x: 8.98, y: 8.26))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9.22, y: 7.17))
        bezierPath.addCurve(to: CGPoint(x: 10.63, y: 8.32), controlPoint1: CGPoint(x: 9.22, y: 7.17), controlPoint2: CGPoint(x: 9.94, y: 7.75))
        bezierPath.addCurve(to: CGPoint(x: 11.91, y: 9.36), controlPoint1: CGPoint(x: 11.28, y: 8.85), controlPoint2: CGPoint(x: 11.91, y: 9.36))
        bezierPath.addCurve(to: CGPoint(x: 12.46, y: 8.72), controlPoint1: CGPoint(x: 11.91, y: 9.36), controlPoint2: CGPoint(x: 12.18, y: 9.05))
        bezierPath.addCurve(to: CGPoint(x: 13.13, y: 7.95), controlPoint1: CGPoint(x: 12.78, y: 8.35), controlPoint2: CGPoint(x: 13.13, y: 7.95))
        bezierPath.addCurve(to: CGPoint(x: 13.92, y: 7.91), controlPoint1: CGPoint(x: 13.33, y: 7.72), controlPoint2: CGPoint(x: 13.69, y: 7.69))
        bezierPath.addLine(to: CGPoint(x: 17.62, y: 11.44))
        bezierPath.addCurve(to: CGPoint(x: 17.73, y: 12.05), controlPoint1: CGPoint(x: 17.77, y: 11.58), controlPoint2: CGPoint(x: 17.85, y: 11.8))
        bezierPath.addCurve(to: CGPoint(x: 17.3, y: 12.33), controlPoint1: CGPoint(x: 17.63, y: 12.25), controlPoint2: CGPoint(x: 17.47, y: 12.32))
        bezierPath.addLine(to: CGPoint(x: 5.4, y: 13.37))
        bezierPath.addCurve(to: CGPoint(x: 4.92, y: 12.56), controlPoint1: CGPoint(x: 5, y: 13.41), controlPoint2: CGPoint(x: 4.64, y: 12.98))
        bezierPath.addCurve(to: CGPoint(x: 8.11, y: 7.77), controlPoint1: CGPoint(x: 4.92, y: 12.56), controlPoint2: CGPoint(x: 7.24, y: 9.07))
        bezierPath.addCurve(to: CGPoint(x: 8.43, y: 7.29), controlPoint1: CGPoint(x: 8.31, y: 7.47), controlPoint2: CGPoint(x: 8.43, y: 7.29))
        bezierPath.addCurve(to: CGPoint(x: 9.22, y: 7.17), controlPoint1: CGPoint(x: 8.61, y: 7.01), controlPoint2: CGPoint(x: 8.98, y: 6.97))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 15.35, y: 3.97))
        bezierPath.addCurve(to: CGPoint(x: 14.67, y: 4.78), controlPoint1: CGPoint(x: 14.94, y: 4.01), controlPoint2: CGPoint(x: 14.63, y: 4.37))
        bezierPath.addCurve(to: CGPoint(x: 14.73, y: 5.03), controlPoint1: CGPoint(x: 14.67, y: 4.87), controlPoint2: CGPoint(x: 14.7, y: 4.95))
        bezierPath.addCurve(to: CGPoint(x: 14.77, y: 5.1), controlPoint1: CGPoint(x: 14.74, y: 5.05), controlPoint2: CGPoint(x: 14.75, y: 5.08))
        bezierPath.addCurve(to: CGPoint(x: 15.48, y: 5.46), controlPoint1: CGPoint(x: 14.91, y: 5.34), controlPoint2: CGPoint(x: 15.18, y: 5.49))
        bezierPath.addCurve(to: CGPoint(x: 16.16, y: 4.65), controlPoint1: CGPoint(x: 15.89, y: 5.43), controlPoint2: CGPoint(x: 16.2, y: 5.06))
        bezierPath.addCurve(to: CGPoint(x: 15.35, y: 3.97), controlPoint1: CGPoint(x: 16.13, y: 4.24), controlPoint2: CGPoint(x: 15.76, y: 3.93))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 17.16, y: 4.56))
        bezierPath.addCurve(to: CGPoint(x: 15.57, y: 6.46), controlPoint1: CGPoint(x: 17.24, y: 5.53), controlPoint2: CGPoint(x: 16.53, y: 6.38))
        bezierPath.addCurve(to: CGPoint(x: 13.67, y: 4.87), controlPoint1: CGPoint(x: 14.6, y: 6.54), controlPoint2: CGPoint(x: 13.76, y: 5.83))
        bezierPath.addCurve(to: CGPoint(x: 14.02, y: 3.66), controlPoint1: CGPoint(x: 13.63, y: 4.42), controlPoint2: CGPoint(x: 13.77, y: 3.99))
        bezierPath.addCurve(to: CGPoint(x: 15.26, y: 2.97), controlPoint1: CGPoint(x: 14.31, y: 3.28), controlPoint2: CGPoint(x: 14.75, y: 3.02))
        bezierPath.addCurve(to: CGPoint(x: 17.16, y: 4.56), controlPoint1: CGPoint(x: 16.22, y: 2.89), controlPoint2: CGPoint(x: 17.07, y: 3.6))
        bezierPath.close()
        StyleKit.appColor.setFill()
        bezierPath.fill()

        context.restoreGState()
    }

    @objc public dynamic class func drawAddIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 56, height: 56), resizing: ResizingBehavior = .aspectFit, highlighted: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 56, height: 56), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 56, y: resizedFrame.height / 56)

        //// Variable Declarations
        let notHighlighted = !highlighted

        if notHighlighted {
            //// Bezier normal Drawing
            let bezierNormalPath = UIBezierPath()
            bezierNormalPath.move(to: CGPoint(x: 42, y: 27))
            bezierNormalPath.addLine(to: CGPoint(x: 29, y: 27))
            bezierNormalPath.addLine(to: CGPoint(x: 29, y: 14))
            bezierNormalPath.addCurve(to: CGPoint(x: 28, y: 13), controlPoint1: CGPoint(x: 29, y: 13.45), controlPoint2: CGPoint(x: 28.55, y: 13))
            bezierNormalPath.addCurve(to: CGPoint(x: 27, y: 14), controlPoint1: CGPoint(x: 27.45, y: 13), controlPoint2: CGPoint(x: 27, y: 13.45))
            bezierNormalPath.addLine(to: CGPoint(x: 27, y: 27))
            bezierNormalPath.addLine(to: CGPoint(x: 14, y: 27))
            bezierNormalPath.addCurve(to: CGPoint(x: 13, y: 28), controlPoint1: CGPoint(x: 13.45, y: 27), controlPoint2: CGPoint(x: 13, y: 27.45))
            bezierNormalPath.addCurve(to: CGPoint(x: 14, y: 29), controlPoint1: CGPoint(x: 13, y: 28.55), controlPoint2: CGPoint(x: 13.45, y: 29))
            bezierNormalPath.addLine(to: CGPoint(x: 27, y: 29))
            bezierNormalPath.addLine(to: CGPoint(x: 27, y: 42))
            bezierNormalPath.addCurve(to: CGPoint(x: 28, y: 43), controlPoint1: CGPoint(x: 27, y: 42.55), controlPoint2: CGPoint(x: 27.45, y: 43))
            bezierNormalPath.addCurve(to: CGPoint(x: 29, y: 42), controlPoint1: CGPoint(x: 28.55, y: 43), controlPoint2: CGPoint(x: 29, y: 42.55))
            bezierNormalPath.addLine(to: CGPoint(x: 29, y: 29))
            bezierNormalPath.addLine(to: CGPoint(x: 42, y: 29))
            bezierNormalPath.addCurve(to: CGPoint(x: 43, y: 28), controlPoint1: CGPoint(x: 42.55, y: 29), controlPoint2: CGPoint(x: 43, y: 28.55))
            bezierNormalPath.addCurve(to: CGPoint(x: 42, y: 27), controlPoint1: CGPoint(x: 43, y: 27.45), controlPoint2: CGPoint(x: 42.55, y: 27))
            bezierNormalPath.close()
            bezierNormalPath.move(to: CGPoint(x: 28, y: 0))
            bezierNormalPath.addCurve(to: CGPoint(x: 0, y: 28), controlPoint1: CGPoint(x: 12.54, y: 0), controlPoint2: CGPoint(x: 0, y: 12.54))
            bezierNormalPath.addCurve(to: CGPoint(x: 28, y: 56), controlPoint1: CGPoint(x: 0, y: 43.46), controlPoint2: CGPoint(x: 12.54, y: 56))
            bezierNormalPath.addCurve(to: CGPoint(x: 56, y: 28), controlPoint1: CGPoint(x: 43.46, y: 56), controlPoint2: CGPoint(x: 56, y: 43.46))
            bezierNormalPath.addCurve(to: CGPoint(x: 28, y: 0), controlPoint1: CGPoint(x: 56, y: 12.54), controlPoint2: CGPoint(x: 43.46, y: 0))
            bezierNormalPath.close()
            bezierNormalPath.move(to: CGPoint(x: 28, y: 54))
            bezierNormalPath.addCurve(to: CGPoint(x: 2, y: 28), controlPoint1: CGPoint(x: 13.64, y: 54), controlPoint2: CGPoint(x: 2, y: 42.36))
            bezierNormalPath.addCurve(to: CGPoint(x: 28, y: 2), controlPoint1: CGPoint(x: 2, y: 13.64), controlPoint2: CGPoint(x: 13.64, y: 2))
            bezierNormalPath.addCurve(to: CGPoint(x: 54, y: 28), controlPoint1: CGPoint(x: 42.36, y: 2), controlPoint2: CGPoint(x: 54, y: 13.64))
            bezierNormalPath.addCurve(to: CGPoint(x: 28, y: 54), controlPoint1: CGPoint(x: 54, y: 42.36), controlPoint2: CGPoint(x: 42.36, y: 54))
            bezierNormalPath.close()
            StyleKit.appColor.setFill()
            bezierNormalPath.fill()
        }

        if highlighted {
            //// Bezier highlighted Drawing
            let bezierHighlightedPath = UIBezierPath()
            bezierHighlightedPath.move(to: CGPoint(x: 28, y: 0))
            bezierHighlightedPath.addCurve(to: CGPoint(x: 0, y: 28), controlPoint1: CGPoint(x: 12.54, y: 0), controlPoint2: CGPoint(x: 0, y: 12.54))
            bezierHighlightedPath.addCurve(to: CGPoint(x: 28, y: 56), controlPoint1: CGPoint(x: 0, y: 43.46), controlPoint2: CGPoint(x: 12.54, y: 56))
            bezierHighlightedPath.addCurve(to: CGPoint(x: 56, y: 28), controlPoint1: CGPoint(x: 43.46, y: 56), controlPoint2: CGPoint(x: 56, y: 43.46))
            bezierHighlightedPath.addCurve(to: CGPoint(x: 28, y: 0), controlPoint1: CGPoint(x: 56, y: 12.54), controlPoint2: CGPoint(x: 43.46, y: 0))
            bezierHighlightedPath.close()
            bezierHighlightedPath.move(to: CGPoint(x: 42, y: 29))
            bezierHighlightedPath.addLine(to: CGPoint(x: 29, y: 29))
            bezierHighlightedPath.addLine(to: CGPoint(x: 29, y: 42))
            bezierHighlightedPath.addCurve(to: CGPoint(x: 28, y: 43), controlPoint1: CGPoint(x: 29, y: 42.55), controlPoint2: CGPoint(x: 28.55, y: 43))
            bezierHighlightedPath.addCurve(to: CGPoint(x: 27, y: 42), controlPoint1: CGPoint(x: 27.45, y: 43), controlPoint2: CGPoint(x: 27, y: 42.55))
            bezierHighlightedPath.addLine(to: CGPoint(x: 27, y: 29))
            bezierHighlightedPath.addLine(to: CGPoint(x: 14, y: 29))
            bezierHighlightedPath.addCurve(to: CGPoint(x: 13, y: 28), controlPoint1: CGPoint(x: 13.45, y: 29), controlPoint2: CGPoint(x: 13, y: 28.55))
            bezierHighlightedPath.addCurve(to: CGPoint(x: 14, y: 27), controlPoint1: CGPoint(x: 13, y: 27.45), controlPoint2: CGPoint(x: 13.45, y: 27))
            bezierHighlightedPath.addLine(to: CGPoint(x: 27, y: 27))
            bezierHighlightedPath.addLine(to: CGPoint(x: 27, y: 14))
            bezierHighlightedPath.addCurve(to: CGPoint(x: 28, y: 13), controlPoint1: CGPoint(x: 27, y: 13.45), controlPoint2: CGPoint(x: 27.45, y: 13))
            bezierHighlightedPath.addCurve(to: CGPoint(x: 29, y: 14), controlPoint1: CGPoint(x: 28.55, y: 13), controlPoint2: CGPoint(x: 29, y: 13.45))
            bezierHighlightedPath.addLine(to: CGPoint(x: 29, y: 27))
            bezierHighlightedPath.addLine(to: CGPoint(x: 42, y: 27))
            bezierHighlightedPath.addCurve(to: CGPoint(x: 43, y: 28), controlPoint1: CGPoint(x: 42.55, y: 27), controlPoint2: CGPoint(x: 43, y: 27.45))
            bezierHighlightedPath.addCurve(to: CGPoint(x: 42, y: 29), controlPoint1: CGPoint(x: 43, y: 28.55), controlPoint2: CGPoint(x: 42.55, y: 29))
            bezierHighlightedPath.close()
            StyleKit.appColor.setFill()
            bezierHighlightedPath.fill()
        }

        context.restoreGState()
    }

    @objc public dynamic class func drawArrowUp(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 54), resizing: ResizingBehavior = .aspectFit, lineWidth: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 54), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 54)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3.37, y: 17.53))
        bezierPath.addLine(to: CGPoint(x: 18.7, y: 3.28))
        bezierPath.addCurve(to: CGPoint(x: 21.97, y: 2), controlPoint1: CGPoint(x: 19.55, y: 2.43), controlPoint2: CGPoint(x: 20.7, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 25.24, y: 3.28), controlPoint1: CGPoint(x: 23.24, y: 2), controlPoint2: CGPoint(x: 24.38, y: 2.43))
        bezierPath.addLine(to: CGPoint(x: 40.63, y: 17.53))
        bezierPath.addCurve(to: CGPoint(x: 40.63, y: 23.66), controlPoint1: CGPoint(x: 42.46, y: 19.22), controlPoint2: CGPoint(x: 42.46, y: 21.97))
        bezierPath.addCurve(to: CGPoint(x: 34.03, y: 23.66), controlPoint1: CGPoint(x: 38.81, y: 25.35), controlPoint2: CGPoint(x: 35.86, y: 25.35))
        bezierPath.addLine(to: CGPoint(x: 26.67, y: 16.83))
        bezierPath.addLine(to: CGPoint(x: 26.67, y: 47.65))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 52), controlPoint1: CGPoint(x: 26.67, y: 50.05), controlPoint2: CGPoint(x: 24.58, y: 52))
        bezierPath.addCurve(to: CGPoint(x: 17.33, y: 47.65), controlPoint1: CGPoint(x: 19.42, y: 52), controlPoint2: CGPoint(x: 17.33, y: 50.05))
        bezierPath.addLine(to: CGPoint(x: 17.33, y: 16.83))
        bezierPath.addLine(to: CGPoint(x: 9.97, y: 23.68))
        bezierPath.addCurve(to: CGPoint(x: 3.37, y: 23.68), controlPoint1: CGPoint(x: 8.14, y: 25.37), controlPoint2: CGPoint(x: 5.19, y: 25.37))
        bezierPath.addCurve(to: CGPoint(x: 3.37, y: 17.53), controlPoint1: CGPoint(x: 1.54, y: 21.97), controlPoint2: CGPoint(x: 1.54, y: 19.23))
        bezierPath.close()
        StyleKit.appColor.setStroke()
        bezierPath.lineWidth = lineWidth
        bezierPath.miterLimit = 4
        bezierPath.stroke()

        context.restoreGState()
    }

    @objc public dynamic class func drawPlainArrowUp(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 14), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 14)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 27.85, y: 13.14))
        bezierPath.addLine(to: CGPoint(x: 27.85, y: 13.14))
        bezierPath.addLine(to: CGPoint(x: 14.35, y: 0.14))
        bezierPath.addLine(to: CGPoint(x: 14.35, y: 0.14))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 14.26, y: 0.05), controlPoint2: CGPoint(x: 14.13, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 13.65, y: 0.14), controlPoint1: CGPoint(x: 13.87, y: 0), controlPoint2: CGPoint(x: 13.74, y: 0.05))
        bezierPath.addLine(to: CGPoint(x: 13.65, y: 0.14))
        bezierPath.addLine(to: CGPoint(x: 0.15, y: 13.14))
        bezierPath.addLine(to: CGPoint(x: 0.15, y: 13.14))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 13.5), controlPoint1: CGPoint(x: 0.06, y: 13.23), controlPoint2: CGPoint(x: 0, y: 13.36))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: 14), controlPoint1: CGPoint(x: 0, y: 13.78), controlPoint2: CGPoint(x: 0.22, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 0.85, y: 13.86), controlPoint1: CGPoint(x: 0.64, y: 14), controlPoint2: CGPoint(x: 0.76, y: 13.95))
        bezierPath.addLine(to: CGPoint(x: 0.85, y: 13.86))
        bezierPath.addLine(to: CGPoint(x: 14, y: 1.19))
        bezierPath.addLine(to: CGPoint(x: 27.15, y: 13.86))
        bezierPath.addLine(to: CGPoint(x: 27.15, y: 13.86))
        bezierPath.addCurve(to: CGPoint(x: 27.5, y: 14), controlPoint1: CGPoint(x: 27.24, y: 13.95), controlPoint2: CGPoint(x: 27.36, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 28, y: 13.5), controlPoint1: CGPoint(x: 27.78, y: 14), controlPoint2: CGPoint(x: 28, y: 13.78))
        bezierPath.addCurve(to: CGPoint(x: 27.85, y: 13.14), controlPoint1: CGPoint(x: 28, y: 13.36), controlPoint2: CGPoint(x: 27.94, y: 13.23))
        bezierPath.close()
        StyleKit.appColor.setFill()
        bezierPath.fill()

        context.restoreGState()
    }

    //// Generated Images

    @objc public dynamic class func imageOfStarButton(lineWidth: CGFloat = 1, selected: Bool = false, highlighted: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 54, height: 54), false, 0)
        StyleKit.drawStarButton(lineWidth: lineWidth, selected: selected, highlighted: highlighted)

        let imageOfStarButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfStarButton
    }

    @objc public dynamic class func imageOfMultiStarButton(lineWidth: CGFloat = 1, selected: Bool = false, highlighted: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 54, height: 54), false, 0)
        StyleKit.drawMultiStarButton(lineWidth: lineWidth, selected: selected, highlighted: highlighted)

        let imageOfMultiStarButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfMultiStarButton
    }

    @objc public dynamic class func imageOfCircleButton(lineWidth: CGFloat = 1, selected: Bool = false, highlighted: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 54, height: 54), false, 0)
        StyleKit.drawCircleButton(lineWidth: lineWidth, selected: selected, highlighted: highlighted)

        let imageOfCircleButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCircleButton
    }

    @objc public dynamic class func imageOfRectangleButton(lineWidth: CGFloat = 1, selected: Bool = false, highlighted: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 54, height: 54), false, 0)
        StyleKit.drawRectangleButton(lineWidth: lineWidth, selected: selected, highlighted: highlighted)

        let imageOfRectangleButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfRectangleButton
    }

    @objc public dynamic class var imageOfTrashToolbarIcon: UIImage {
        if Cache.imageOfTrashToolbarIcon != nil {
            return Cache.imageOfTrashToolbarIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 22), false, 0)
        StyleKit.drawTrashToolbarIcon()

        Cache.imageOfTrashToolbarIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfTrashToolbarIcon!
    }

    @objc public dynamic class var imageOfAddToolbarIcon: UIImage {
        if Cache.imageOfAddToolbarIcon != nil {
            return Cache.imageOfAddToolbarIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
        StyleKit.drawAddToolbarIcon()

        Cache.imageOfAddToolbarIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAddToolbarIcon!
    }

    @objc public dynamic class var imageOfPhotoToolbarIcon: UIImage {
        if Cache.imageOfPhotoToolbarIcon != nil {
            return Cache.imageOfPhotoToolbarIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 18), false, 0)
        StyleKit.drawPhotoToolbarIcon()

        Cache.imageOfPhotoToolbarIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPhotoToolbarIcon!
    }

    @objc public dynamic class var imageOfEditToolbarIcon: UIImage {
        if Cache.imageOfEditToolbarIcon != nil {
            return Cache.imageOfEditToolbarIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
        StyleKit.drawEditToolbarIcon()

        Cache.imageOfEditToolbarIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfEditToolbarIcon!
    }

    @objc public dynamic class var imageOfStickerToolbarIcon: UIImage {
        if Cache.imageOfStickerToolbarIcon != nil {
            return Cache.imageOfStickerToolbarIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 20), false, 0)
        StyleKit.drawStickerToolbarIcon()

        Cache.imageOfStickerToolbarIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfStickerToolbarIcon!
    }

    @objc public dynamic class func imageOfAddIcon(highlighted: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 56, height: 56), false, 0)
        StyleKit.drawAddIcon(highlighted: highlighted)

        let imageOfAddIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfAddIcon
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var trashToolbarIconTargets: [AnyObject]! {
        get { return Cache.trashToolbarIconTargets }
        set {
            Cache.trashToolbarIconTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfTrashToolbarIcon)
            }
        }
    }

    @IBOutlet dynamic var addToolbarIconTargets: [AnyObject]! {
        get { return Cache.addToolbarIconTargets }
        set {
            Cache.addToolbarIconTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfAddToolbarIcon)
            }
        }
    }

    @IBOutlet dynamic var photoToolbarIconTargets: [AnyObject]! {
        get { return Cache.photoToolbarIconTargets }
        set {
            Cache.photoToolbarIconTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfPhotoToolbarIcon)
            }
        }
    }

    @IBOutlet dynamic var editToolbarIconTargets: [AnyObject]! {
        get { return Cache.editToolbarIconTargets }
        set {
            Cache.editToolbarIconTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfEditToolbarIcon)
            }
        }
    }

    @IBOutlet dynamic var stickerToolbarIconTargets: [AnyObject]! {
        get { return Cache.stickerToolbarIconTargets }
        set {
            Cache.stickerToolbarIconTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfStickerToolbarIcon)
            }
        }
    }

    @objc(StyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}

private extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }

    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }

    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }

    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }

    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1 - highlight) + highlight, green: green * (1 - highlight) + highlight, blue: blue * (1 - highlight) + highlight, alpha: alpha * (1 - highlight) + highlight)
    }

    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1 - shadow), green: green * (1 - shadow), blue: blue * (1 - shadow), alpha: alpha * (1 - shadow) + shadow)
    }
}

private extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        shadowColor = color
        shadowOffset = offset
        shadowBlurRadius = blurRadius
    }
}
